type Empty = {
  trackingId: string;
  payload: any;
  status: string;
};

type Error = {
  trackingId: string;
  status: string;
  payload: ErrorPayload;
};

type PortfolioResponse = {
  trackingId: string;
  status: string;
  payload: Portfolio;
};

type Portfolio = {
  positions: PortfolioPosition[];
};

type PortfolioCurrenciesResponse = {
  trackingId: string;
  status: string;
  payload: Currencies;
};

type Currencies = {
  currencies: CurrencyPosition[];
};

type CurrencyPosition = {
  currency: Currency;
  balance: number;
  blocked?: number;
};

type PortfolioPosition = {
  figi: string;
  ticker?: string;
  isin?: string;
  instrumentType: InstrumentType;
  balance: number;
  blocked?: number;
  lots: number;
  expectedYield?: MoneyAmount;
  averagePositionPrice?: MoneyAmount;
  averagePositionPriceNoNkd?: MoneyAmount;
};

type MoneyAmount = {
  currency: Currency;
  value: number;
};

type OrderbookResponse = {
  trackingId: string;
  status: string;
  payload: Orderbook;
};

type Orderbook = {
  figi: string;
  depth: number;
  bids: OrderResponse[];
  asks: OrderResponse[];
  tradeStatus: TradeStatus;
  minPriceIncrement: number;
  lastPrice?: number;
  closePrice?: number;
  limitUp?: number;
  limitDown?: number;
};

type OrderResponse = {
  price: number;
  quantity: number;
};

type CandlesResponse = {
  trackingId: string;
  status: string;
  payload: Candles;
};

type Candles = {
  figi: string;
  interval: CandleResolution;
  candles: Candle[];
};

type Candle = {
  figi: string;
  interval: CandleResolution;
  o: number;
  c: number;
  h: number;
  l: number;
  v: number;
  time: string;
};

type CandleResolution = {};

type OperationsResponse = {
  trackingId: string;
  status: string;
  payload: Operations;
};

type Operations = {
  operations: Operation[];
};

type OperationTrade = {
  tradeId: string;
  date: string;
  price: number;
  quantity: number;
};

type Operation = {
  id: string;
  status: OperationStatus;
  trades?: OperationTrade[];
  commission?: MoneyAmount;
  currency: Currency;
  payment: number;
  price?: number;
  quantity?: number;
  figi?: string;
  instrumentType?: InstrumentType;
  isMarginCall: boolean;
  date: string;
  operationType?: OperationTypeWithCommission;
};

type OrdersResponse = {
  trackingId: string;
  status: string;
  payload: Order[];
};

type Order = {
  orderId: string;
  figi: string;
  operation: OperationType;
  status: OrderStatus;
  requestedLots: number;
  executedLots: number;
  type: OrderType;
  price: number;
};

type LimitOrderRequest = {
  lots: number;
  operation: OperationType;
  price: number;
};

type LimitOrderResponse = {
  trackingId: string;
  status: string;
  payload: PlacedLimitOrder;
};

type PlacedLimitOrder = {
  orderId: string;
  operation: OperationType;
  status: OrderStatus;
  rejectReason?: string;
  requestedLots: number;
  executedLots: number;
  commission?: MoneyAmount;
};

type TradeStatus = {};

type OperationType = {};

type OperationTypeWithCommission = {};

type OperationStatus = {};

type OrderStatus = {};

type OrderType = {};

type SandboxSetCurrencyBalanceRequest = {
  currency: SandboxCurrency;
  balance: number;
};

type SandboxSetPositionBalanceRequest = {
  figi?: string;
  balance: number;
};

type MarketInstrumentListResponse = {
  trackingId: string;
  status: string;
  payload: MarketInstrumentList;
};

type MarketInstrumentList = {
  total: number;
  instruments: MarketInstrument[];
};

type MarketInstrumentResponse = {
  trackingId: string;
  status: string;
  payload: MarketInstrument;
};

type MarketInstrument = {
  figi: string;
  ticker: string;
  isin?: string;
  minPriceIncrement?: number;
  lot: number;
  currency?: Currency;
  name: string;
};

type SandboxCurrency = {};

type Currency = {};

type InstrumentType = {};

type ErrorPayload = {
  message?: string;
  code?: string;
};

export { Candle, CandleResolution, Candles, CandlesResponse, Currencies, Currency, CurrencyPosition, Empty, Error, ErrorPayload, InstrumentType, LimitOrderRequest, LimitOrderResponse, MarketInstrument, MarketInstrumentList, MarketInstrumentListResponse, MarketInstrumentResponse, MoneyAmount, Operation, OperationStatus, OperationTrade, OperationType, OperationTypeWithCommission, Operations, OperationsResponse, Order, OrderResponse, OrderStatus, OrderType, Orderbook, OrderbookResponse, OrdersResponse, PlacedLimitOrder, Portfolio, PortfolioCurrenciesResponse, PortfolioPosition, PortfolioResponse, SandboxCurrency, SandboxSetCurrencyBalanceRequest, SandboxSetPositionBalanceRequest, TradeStatus };
