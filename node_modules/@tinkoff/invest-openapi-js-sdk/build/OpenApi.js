'use strict';

var events = require('events');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var realFetch = require('node-fetch');
module.exports = function(url, options) {
	if (/^\/\//.test(url)) {
		url = 'https:' + url;
	}
	return realFetch.call(this, url, options);
};

if (!global.fetch) {
	global.fetch = module.exports;
	global.Response = realFetch.Response;
	global.Headers = realFetch.Headers;
	global.Request = realFetch.Request;
}

var WebSocket = require('ws');
function getQueryString(params) {
    var esc = encodeURIComponent;
    var s = Object.keys(params)
        .map(function (k) { return esc(k) + '=' + esc(params[k]); })
        .join('&');
    return s ? '?' + s : '';
}
function once(fn) {
    var result;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!result) {
            result = { value: fn.apply(void 0, args) };
        }
        return result.value;
    };
}
/**
 * @noInheritDoc
 */
var OpenAPI = /** @class */ (function (_super) {
    __extends(OpenAPI, _super);
    /**
     *
     * @param apiURL REST api url см [документацию](https://tinkoffcreditsystems.github.io/invest-openapi/env/)
     * @param socketURL Streaming api url см [документацию](https://tinkoffcreditsystems.github.io/invest-openapi/env/)
     * @param secretToken токен доступа см [получение токена доступа](https://tinkoffcreditsystems.github.io/invest-openapi/auth/)
     *
     */
    function OpenAPI(_a) {
        var apiURL = _a.apiURL, socketURL = _a.socketURL, secretToken = _a.secretToken;
        var _this = _super.call(this) || this;
        _this._ws = null;
        _this.sandboxRegister = once(function () { return _this.makeRequest('/sandbox/register', { method: 'post' }); });
        _this._ws = null;
        _this.apiURL = apiURL;
        _this.socketURL = socketURL;
        _this.secretToken = secretToken;
        _this.authHeaders = {
            Authorization: 'Bearer ' + _this.secretToken,
            'Content-Type': 'application/json',
        };
        return _this;
    }
    OpenAPI.prototype.ws = function () {
        var _this = this;
        if (!this._ws) {
            this._ws = new Promise(function (resolve) {
                var ws = new WebSocket(_this.socketURL, {
                    perMessageDeflate: false,
                    headers: _this.authHeaders,
                });
                ws.on('open', function () {
                    resolve(ws);
                });
                ws.on('message', function (m) {
                    var _a = JSON.parse(m), type = _a.event, payload = _a.payload;
                    _this.emit(_this.getEventName(type, payload), payload);
                });
            });
        }
        return this._ws;
    };
    OpenAPI.prototype.makeRequest = function (url, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.method, method = _c === void 0 ? 'get' : _c, params = _b.params;
        return (method === 'get'
            ? fetch(this.apiURL + url + getQueryString(params || {}), {
                method: method,
                headers: new Headers(this.authHeaders),
            })
            : fetch(this.apiURL + url, {
                method: method,
                headers: new Headers(this.authHeaders),
                body: JSON.stringify(params),
            }))
            .then(function (x) {
            if (!x.ok) {
                return x.json().then(function (x) { return Promise.reject(x.payload); });
            }
            return x.json();
        })
            .then(function (x) {
            return x.payload;
        });
    };
    OpenAPI.prototype.getEventName = function (type, params) {
        if (type === 'orderbook') {
            return type + "-" + params.figi + "-" + params.depth;
        }
        if (type === 'candle') {
            return type + "-" + params.figi + "-" + params.interval;
        }
        if (type === 'instrument_info') {
            return type + "-" + params.figi;
        }
        throw new Error("Unknown type: " + type);
    };
    OpenAPI.prototype.subscribeToSocket = function (_a, cb) {
        var _this = this;
        var type = _a.type, params = __rest(_a, ["type"]);
        this.ws().then(function (ws) {
            return ws.send(JSON.stringify(__assign({ event: type + ":subscribe" }, params)));
        });
        var handler = function (x) { return cb(x); };
        var eventName = this.getEventName(type, params);
        this.on(eventName, handler);
        var unsubscribe = function () {
            _this.off(eventName, handler);
            if (!_this.listenerCount(eventName)) {
                _this.ws().then(function (ws) {
                    return ws.send(JSON.stringify(__assign({ event: type + ":unsubscribe" }, params)));
                });
            }
        };
        return unsubscribe;
    };
    /**
     * Метод для очистки песочницы
     */
    OpenAPI.prototype.sandboxClear = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sandboxRegister()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.makeRequest('/sandbox/clear', { method: 'post' })];
                }
            });
        });
    };
    /**
     * Метод для задания баланса по бумагам
     * @param params см. описание типа
     */
    OpenAPI.prototype.setPositionBalance = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sandboxRegister()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.makeRequest('/sandbox/positions/balance', { method: 'post', params: params })];
                }
            });
        });
    };
    /**
     * Метод для задания баланса по валютам
     * @param params см. описание типа
     */
    OpenAPI.prototype.setCurrenciesBalance = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sandboxRegister()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.makeRequest('/sandbox/currencies/balance', { method: 'post', params: params })];
                }
            });
        });
    };
    /**
     * Метод для получение портфеля цб
     */
    OpenAPI.prototype.portfolio = function () {
        return this.makeRequest('/portfolio');
    };
    /**
     * Метод для получение данных по инструменту в портфеле
     */
    OpenAPI.prototype.instrumentPortfolio = function (params) {
        return this.portfolio().then(function (x) {
            return (x.positions.find(function (position) {
                if ('figi' in params) {
                    return position.figi === params.figi;
                }
                if ('ticker' in params) {
                    return position.ticker === params.ticker;
                }
            }) || null);
        });
    };
    /**
     * Метод для выставления заявки
     * @param figi идентификатор инструмента
     * @param lots количество лотов для заявки
     * @param operation тип заявки
     * @param price цена лимитной заявки
     */
    OpenAPI.prototype.limitOrder = function (_a) {
        var figi = _a.figi, lots = _a.lots, operation = _a.operation, price = _a.price;
        return this.makeRequest("/orders/limit-order?figi=" + figi, {
            method: 'post',
            params: {
                lots: lots,
                operation: operation,
                price: price,
            },
        });
    };
    //todo протестить
    /**
     * Метод для отмены активных заявок
     * @param orderId идентифткатор заявки
     */
    OpenAPI.prototype.cancelOrder = function (_a) {
        var orderId = _a.orderId;
        return this.makeRequest("/orders/cancel?orderId=" + orderId, { method: 'post' });
    };
    /**
     * Метод для получения всех активных заявок
     */
    OpenAPI.prototype.orders = function () {
        return this.makeRequest('/orders');
    };
    /**
     * Метод для получения всех доступных валютных инструментов
     */
    OpenAPI.prototype.currencies = function () {
        return this.makeRequest('/market/currencies');
    };
    /**
     * Метод для получения всех доступных валютных ETF
     */
    OpenAPI.prototype.etfs = function () {
        return this.makeRequest('/market/etfs');
    };
    /**
     * Метод для получения всех доступных облигаций
     */
    OpenAPI.prototype.bonds = function () {
        return this.makeRequest('/market/bonds');
    };
    /**
     * Метод для получения всех доступных акций
     */
    OpenAPI.prototype.stocks = function () {
        return this.makeRequest('/market/stocks');
    };
    /**
     * Метод для получения операций по цб по инструменту
     * @param from Начало временного промежутка в формате ISO 8601
     * @param to Конец временного промежутка в формате ISO 8601
     * @param figi Figi-идентификатор инструмента
     */
    OpenAPI.prototype.operations = function (_a) {
        var from = _a.from, to = _a.to, figi = _a.figi;
        return this.makeRequest('/operations', {
            params: { from: from, to: to, figi: figi },
        });
    };
    /**
     * Метод для получения исторических свечей по FIGI
     * @param from Начало временного промежутка в формате ISO 8601
     * @param to Конец временного промежутка в формате ISO 8601
     * @param figi Figi-идентификатор инструмента
     * @param interval интервал для свечи
     */
    OpenAPI.prototype.candlesGet = function (_a) {
        var from = _a.from, to = _a.to, figi = _a.figi, _b = _a.interval, interval = _b === void 0 ? '1min' : _b;
        return this.makeRequest('/market/candles', {
            params: { from: from, to: to, figi: figi, interval: interval },
        });
    };
    /**
     * Метод для получение стакана
     * @param figi Figi-идентификатор инструмента
     * @param depth
     */
    OpenAPI.prototype.orderbookGet = function (_a) {
        var figi = _a.figi, _b = _a.depth, depth = _b === void 0 ? 3 : _b;
        return this.makeRequest('/market/orderbook', {
            params: { figi: figi, depth: depth },
        });
    };
    /**
     * Метод для поиска инструментов по figi или ticker
     * @param params { figi или ticker }
     */
    OpenAPI.prototype.search = function (params) {
        if ('figi' in params) {
            return this.makeRequest('/market/search/by-figi', {
                params: { figi: params.figi },
            }).then(function (x) { return (x ? { total: 1, instruments: [x] } : { total: 0, instruments: [] }); });
        }
        if ('ticker' in params) {
            return this.makeRequest('/market/search/by-ticker', {
                params: { ticker: params.ticker },
            });
        }
        throw new Error('should specify figi or ticker');
    };
    /**
     * Метод для поиска инструмента по figi или ticker
     * @param params { figi или ticker }
     */
    OpenAPI.prototype.searchOne = function (params) {
        return this.search(params).then(function (x) { return x.instruments[0] || null; });
    };
    /**
     * Метод для подписки на данные по стакану инструмента
     * @example
     * ```typescript
     * const { figi } = await api.searchOne({ ticker: 'AAPL' });
     * const unsubFromAAPL = api.orderbook({ figi }, (ob) => { console.log(ob.bids) });
     * // ... подписка больше не нужна
     * unsubFromAAPL();
     * ```
     * @param figi идентификатор инструмента
     * @param depth
     * @param cb функция для обработки новых данных по стакану
     * @return функция для отмены подписки
     */
    OpenAPI.prototype.orderbook = function (_a, cb) {
        var figi = _a.figi, _b = _a.depth, depth = _b === void 0 ? 3 : _b;
        if (cb === void 0) { cb = console.log; }
        return this.subscribeToSocket({ type: 'orderbook', figi: figi, depth: depth }, cb);
    };
    /**
     * Метод для подписки на данные по свечному графику инструмента
     * @example см. метод [[orderbook]]
     * @param figi идентификатор инструмента
     * @param interval интервал для свечи
     * @param cb функция для обработки новых данных по свечи
     * @return функция для отмены подписки
     */
    OpenAPI.prototype.candle = function (_a, cb) {
        var figi = _a.figi, _b = _a.interval, interval = _b === void 0 ? '1min' : _b;
        if (cb === void 0) { cb = console.log; }
        return this.subscribeToSocket({ type: 'candle', figi: figi, interval: interval }, cb);
    };
    /**
     * Метод для подписки на данные по инструменту
     * @example см. метод [[orderbook]]
     * @param figi идентификатор инструмента
     * @param cb функция для обработки новых данных по инструменту
     * @return функция для отмены подписки
     */
    OpenAPI.prototype.instrumentInfo = function (_a, cb) {
        var figi = _a.figi;
        if (cb === void 0) { cb = console.log; }
        return this.subscribeToSocket({ type: 'instrument_info', figi: figi }, cb);
    };
    return OpenAPI;
}(events.EventEmitter));

module.exports = OpenAPI;
