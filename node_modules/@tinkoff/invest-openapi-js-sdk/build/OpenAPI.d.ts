/// <reference types="node" />
import 'isomorphic-fetch';
import { EventEmitter } from 'events';
import { Candles, MarketInstrument, MarketInstrumentList, Operations, OperationType, Order, Orderbook, PlacedLimitOrder, Portfolio, PortfolioPosition, SandboxSetCurrencyBalanceRequest, SandboxSetPositionBalanceRequest } from './domain';
declare type Interval = '1min' | '2min' | '3min' | '5min' | '10min' | '15min' | '30min' | 'hour' | '2hour' | '4hour' | 'day' | 'week' | 'month';
declare type Depth = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
declare type OrderbookStreaming = {
    figi: string;
    depth: Depth;
    bids: Array<[number, number]>;
};
declare type InstrumentId = {
    ticker: string;
} | {
    figi: string;
};
declare type CandleStreaming = {
    o: number;
    c: number;
    h: number;
    l: number;
    v: number;
    time: string;
    interval: Interval;
    figi: string;
};
declare type LimitOrderParams = {
    figi: string;
    lots: number;
    operation: OperationType;
    price: number;
};
/**
 * @noInheritDoc
 */
export default class OpenAPI extends EventEmitter {
    private _ws;
    private readonly apiURL;
    private readonly socketURL;
    private readonly secretToken;
    private readonly authHeaders;
    /**
     *
     * @param apiURL REST api url см [документацию](https://tinkoffcreditsystems.github.io/invest-openapi/env/)
     * @param socketURL Streaming api url см [документацию](https://tinkoffcreditsystems.github.io/invest-openapi/env/)
     * @param secretToken токен доступа см [получение токена доступа](https://tinkoffcreditsystems.github.io/invest-openapi/auth/)
     *
     */
    constructor({ apiURL, socketURL, secretToken, }: {
        apiURL: string;
        socketURL: string;
        secretToken: string;
    });
    private ws;
    private makeRequest;
    private getEventName;
    private subscribeToSocket;
    private sandboxRegister;
    /**
     * Метод для очистки песочницы
     */
    sandboxClear(): Promise<any>;
    /**
     * Метод для задания баланса по бумагам
     * @param params см. описание типа
     */
    setPositionBalance(params: SandboxSetPositionBalanceRequest): Promise<void>;
    /**
     * Метод для задания баланса по валютам
     * @param params см. описание типа
     */
    setCurrenciesBalance(params: SandboxSetCurrencyBalanceRequest): Promise<void>;
    /**
     * Метод для получение портфеля цб
     */
    portfolio(): Promise<Portfolio>;
    /**
     * Метод для получение данных по инструменту в портфеле
     */
    instrumentPortfolio(params: InstrumentId): Promise<PortfolioPosition | null>;
    /**
     * Метод для выставления заявки
     * @param figi идентификатор инструмента
     * @param lots количество лотов для заявки
     * @param operation тип заявки
     * @param price цена лимитной заявки
     */
    limitOrder({ figi, lots, operation, price }: LimitOrderParams): Promise<PlacedLimitOrder>;
    /**
     * Метод для отмены активных заявок
     * @param orderId идентифткатор заявки
     */
    cancelOrder({ orderId }: {
        orderId: string;
    }): Promise<void>;
    /**
     * Метод для получения всех активных заявок
     */
    orders(): Promise<Order[]>;
    /**
     * Метод для получения всех доступных валютных инструментов
     */
    currencies(): Promise<MarketInstrumentList>;
    /**
     * Метод для получения всех доступных валютных ETF
     */
    etfs(): Promise<MarketInstrumentList>;
    /**
     * Метод для получения всех доступных облигаций
     */
    bonds(): Promise<MarketInstrumentList>;
    /**
     * Метод для получения всех доступных акций
     */
    stocks(): Promise<MarketInstrumentList>;
    /**
     * Метод для получения операций по цб по инструменту
     * @param from Начало временного промежутка в формате ISO 8601
     * @param to Конец временного промежутка в формате ISO 8601
     * @param figi Figi-идентификатор инструмента
     */
    operations({ from, to, figi }: {
        from: string;
        to: string;
        figi: string;
    }): Promise<Operations>;
    /**
     * Метод для получения исторических свечей по FIGI
     * @param from Начало временного промежутка в формате ISO 8601
     * @param to Конец временного промежутка в формате ISO 8601
     * @param figi Figi-идентификатор инструмента
     * @param interval интервал для свечи
     */
    candlesGet({ from, to, figi, interval, }: {
        from: string;
        to: string;
        figi: string;
        interval?: Interval;
    }): Promise<Candles>;
    /**
     * Метод для получение стакана
     * @param figi Figi-идентификатор инструмента
     * @param depth
     */
    orderbookGet({ figi, depth }: {
        figi: string;
        depth?: Depth;
    }): Promise<Orderbook>;
    /**
     * Метод для поиска инструментов по figi или ticker
     * @param params { figi или ticker }
     */
    search(params: InstrumentId): Promise<MarketInstrumentList>;
    /**
     * Метод для поиска инструмента по figi или ticker
     * @param params { figi или ticker }
     */
    searchOne(params: InstrumentId): Promise<MarketInstrument | null>;
    /**
     * Метод для подписки на данные по стакану инструмента
     * @example
     * ```typescript
     * const { figi } = await api.searchOne({ ticker: 'AAPL' });
     * const unsubFromAAPL = api.orderbook({ figi }, (ob) => { console.log(ob.bids) });
     * // ... подписка больше не нужна
     * unsubFromAAPL();
     * ```
     * @param figi идентификатор инструмента
     * @param depth
     * @param cb функция для обработки новых данных по стакану
     * @return функция для отмены подписки
     */
    orderbook({ figi, depth }: {
        figi: string;
        depth?: Depth;
    }, cb?: (x: OrderbookStreaming) => any): () => void;
    /**
     * Метод для подписки на данные по свечному графику инструмента
     * @example см. метод [[orderbook]]
     * @param figi идентификатор инструмента
     * @param interval интервал для свечи
     * @param cb функция для обработки новых данных по свечи
     * @return функция для отмены подписки
     */
    candle({ figi, interval }: {
        figi: string;
        interval?: Interval;
    }, cb?: (x: CandleStreaming) => any): () => void;
    /**
     * Метод для подписки на данные по инструменту
     * @example см. метод [[orderbook]]
     * @param figi идентификатор инструмента
     * @param cb функция для обработки новых данных по инструменту
     * @return функция для отмены подписки
     */
    instrumentInfo({ figi }: {
        figi: string;
    }, cb?: {
        (message?: any, ...optionalParams: any[]): void;
        (message?: any, ...optionalParams: any[]): void;
    }): () => void;
}
export {};
